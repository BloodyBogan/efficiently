/*
 * The MIT License
 *
 * Copyright 2020 Michal Kaštan <github.com/BloodyBogan> & Ladislav Capalaj.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package efficiently.views.dashboard;

import efficiently.controllers.DashboardController;
import efficiently.models.User;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Michal Kaštan <github.com/BloodyBogan> & Ladislav Capalaj
 */
public class Correspondent extends javax.swing.JPanel {
    private final static String ACCESS_LEVEL = "correspondent";
    /**
     * Creates new form Correspondent
     */
    @SuppressWarnings("unchecked")
    public Correspondent() {
        initComponents();
        deleteDateTimeList.setModel(new DefaultListModel());
        deleteDateTimeList.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Container = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        manageTabbedPane = new javax.swing.JTabbedPane();
        viewPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        aisIdLabel = new javax.swing.JLabel();
        aisIdField = new javax.swing.JTextField();
        subjectLabel = new javax.swing.JLabel();
        subjectField = new javax.swing.JTextField();
        messageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        responseLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        responseTextArea = new javax.swing.JTextArea();
        dateLabel = new javax.swing.JLabel();
        dateTimeLabel = new javax.swing.JLabel();
        closedCheckBox = new javax.swing.JCheckBox();
        managePanel = new javax.swing.JPanel();
        manageResponseLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        manageResponseTextArea = new javax.swing.JTextArea();
        manageClosedCheckBox = new javax.swing.JCheckBox();
        manageUpdateButton = new javax.swing.JButton();
        manageDeleteButton = new javax.swing.JButton();
        datesAndTimesPanel = new javax.swing.JPanel();
        addDateTimeLabel = new javax.swing.JLabel();
        addDateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        addDateTimeButton = new javax.swing.JButton();
        deleteDateTimeLabel = new javax.swing.JLabel();
        deleteDateTimeComboBox = new javax.swing.JComboBox<>();
        deleteDateTimeButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        deleteDateTimeList = new javax.swing.JList<>();
        appointmentsPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        appointmentsTable = new javax.swing.JTable();
        userNameLabel = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setName("Correspondent"); // NOI18N

        Container.setMaximumSize(new java.awt.Dimension(1280, 720));
        Container.setMinimumSize(new java.awt.Dimension(1280, 720));
        Container.setName("Container"); // NOI18N
        Container.setPreferredSize(new java.awt.Dimension(1280, 720));

        title.setText("Correspondent Dashboard");
        title.setFont(new java.awt.Font("Open Sans", 1, 35)); // NOI18N

        logoutButton.setText("Log Out");
        logoutButton.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        manageTabbedPane.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        manageTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                manageTabbedPaneStateChanged(evt);
            }
        });

        nameLabel.setText("Name");
        nameLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        nameField.setEditable(false);
        nameField.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        aisIdLabel.setText("AIS ID");
        aisIdLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        aisIdField.setEditable(false);
        aisIdField.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        subjectLabel.setText("Subject");
        subjectLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        subjectField.setEditable(false);
        subjectField.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        messageLabel.setText("Message");
        messageLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        messageTextArea.setColumns(20);
        messageTextArea.setEditable(false);
        messageTextArea.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(3);
        jScrollPane2.setViewportView(messageTextArea);

        responseLabel.setText("Response");
        responseLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        responseTextArea.setColumns(20);
        responseTextArea.setEditable(false);
        responseTextArea.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N
        responseTextArea.setLineWrap(true);
        responseTextArea.setRows(3);
        jScrollPane3.setViewportView(responseTextArea);

        dateLabel.setText("Date:");
        dateLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        dateTimeLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        closedCheckBox.setText("Closed");
        closedCheckBox.setEnabled(false);
        closedCheckBox.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subjectField)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(viewPanelLayout.createSequentialGroup()
                        .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewPanelLayout.createSequentialGroup()
                                .addComponent(nameField)
                                .addGap(18, 18, 18))
                            .addGroup(viewPanelLayout.createSequentialGroup()
                                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(messageLabel)
                                    .addComponent(responseLabel)
                                    .addComponent(nameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aisIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aisIdLabel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPanelLayout.createSequentialGroup()
                        .addComponent(dateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateTimeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closedCheckBox))
                    .addGroup(viewPanelLayout.createSequentialGroup()
                        .addComponent(subjectLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(aisIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField)
                    .addComponent(aisIdField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subjectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subjectField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(responseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closedCheckBox)
                    .addComponent(dateLabel)
                    .addComponent(dateTimeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manageTabbedPane.addTab("View", viewPanel);

        manageResponseLabel.setText("Response");
        manageResponseLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        manageResponseTextArea.setColumns(20);
        manageResponseTextArea.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N
        manageResponseTextArea.setRows(5);
        jScrollPane5.setViewportView(manageResponseTextArea);

        manageClosedCheckBox.setText("Closed");
        manageClosedCheckBox.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        manageUpdateButton.setText("Update");
        manageUpdateButton.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        manageUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageUpdateButtonActionPerformed(evt);
            }
        });

        manageDeleteButton.setText("Delete");
        manageDeleteButton.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        manageDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managePanelLayout = new javax.swing.GroupLayout(managePanel);
        managePanel.setLayout(managePanelLayout);
        managePanelLayout.setHorizontalGroup(
            managePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(managePanelLayout.createSequentialGroup()
                        .addGroup(managePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manageResponseLabel)
                            .addComponent(manageClosedCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(managePanelLayout.createSequentialGroup()
                        .addComponent(manageUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manageDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                .addContainerGap())
        );
        managePanelLayout.setVerticalGroup(
            managePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageResponseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(manageClosedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addGroup(managePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageUpdateButton)
                    .addComponent(manageDeleteButton))
                .addContainerGap())
        );

        manageTabbedPane.addTab("Manage", managePanel);

        addDateTimeLabel.setText("Add date & time");
        addDateTimeLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        addDateTimePicker.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        addDateTimeButton.setText("Add");
        addDateTimeButton.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        addDateTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateTimeButtonActionPerformed(evt);
            }
        });

        deleteDateTimeLabel.setText("Delete date & time");
        deleteDateTimeLabel.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        deleteDateTimeComboBox.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N

        deleteDateTimeButton.setText("Delete");
        deleteDateTimeButton.setFont(new java.awt.Font("Open Sans", 1, 17)); // NOI18N
        deleteDateTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDateTimeButtonActionPerformed(evt);
            }
        });

        jScrollPane6.setFocusable(false);

        deleteDateTimeList.setEnabled(false);
        deleteDateTimeList.setFocusable(false);
        jScrollPane6.setViewportView(deleteDateTimeList);

        javax.swing.GroupLayout datesAndTimesPanelLayout = new javax.swing.GroupLayout(datesAndTimesPanel);
        datesAndTimesPanel.setLayout(datesAndTimesPanelLayout);
        datesAndTimesPanelLayout.setHorizontalGroup(
            datesAndTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datesAndTimesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datesAndTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                    .addComponent(addDateTimeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteDateTimeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteDateTimeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(datesAndTimesPanelLayout.createSequentialGroup()
                        .addGroup(datesAndTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDateTimeLabel)
                            .addComponent(deleteDateTimeLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        datesAndTimesPanelLayout.setVerticalGroup(
            datesAndTimesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datesAndTimesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addDateTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addDateTimeButton)
                .addGap(18, 18, 18)
                .addComponent(deleteDateTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteDateTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteDateTimeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        manageTabbedPane.addTab("Dates & Times", datesAndTimesPanel);

        appointmentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Appointments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Open Sans", 1, 17))); // NOI18N

        appointmentsTable.setAutoCreateRowSorter(true);
        appointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "AIS ID", "Subject", "Message", "Response", "Date", "Closed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentsTable.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N
        appointmentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentsTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(appointmentsTable);

        javax.swing.GroupLayout appointmentsPanelLayout = new javax.swing.GroupLayout(appointmentsPanel);
        appointmentsPanel.setLayout(appointmentsPanelLayout);
        appointmentsPanelLayout.setHorizontalGroup(
            appointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                .addContainerGap())
        );
        appointmentsPanelLayout.setVerticalGroup(
            appointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        userNameLabel.setEnabled(false);
        userNameLabel.setFocusable(false);
        userNameLabel.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N

        javax.swing.GroupLayout ContainerLayout = new javax.swing.GroupLayout(Container);
        Container.setLayout(ContainerLayout);
        ContainerLayout.setHorizontalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addGap(410, 410, 410)
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ContainerLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(manageTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addComponent(userNameLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(refreshButton)
                                .addGap(25, 25, 25)
                                .addComponent(logoutButton))
                            .addComponent(appointmentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(25, 25, 25))))
        );
        ContainerLayout.setVerticalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerLayout.createSequentialGroup()
                        .addComponent(appointmentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(25, 25, 25)
                        .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logoutButton)
                            .addComponent(refreshButton)))
                    .addComponent(manageTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public static void refresh() throws SQLException, IOException {
        try {
            DashboardController.handleCorrespondentAppointmentsTableUpdate(appointmentsTable);
            appointmentsTable.clearSelection();
            DashboardController.handleCorrespondentDateTimeUpdate(deleteDateTimeComboBox, deleteDateTimeList);
            resetRest();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private static void resetTable() {
        appointmentsTable.clearSelection();
        DefaultTableModel model = (DefaultTableModel) appointmentsTable.getModel();
        model.setRowCount(0);
        appointmentsTable.revalidate();
    }
    
    private static void resetRest() {
        manageResponseTextArea.setText("");
        manageResponseTextArea.requestFocus();
        manageClosedCheckBox.setSelected(false);

        nameField.setText("");
        aisIdField.setText("");
        subjectField.setText("");
        messageTextArea.setText("");
        responseTextArea.setText("");
        dateTimeLabel.setText("");
        closedCheckBox.setSelected(false);
        
        addDateTimePicker.datePicker.setText("");
        addDateTimePicker.timePicker.setText("");
        addDateTimePicker.datePicker.requestFocus();
        deleteDateTimeComboBox.setSelectedIndex(0);
        
        manageTabbedPane.setSelectedIndex(0);
    }
    
    public static void setUserName() {
        userNameLabel.setText("Hello, " + User.getName());
    }
    
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        DashboardController.logout();
        resetTable();
        resetRest();
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void appointmentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentsTableMouseClicked
        try {
            if (User.isSessionValid(ACCESS_LEVEL)) {
                DashboardController.handleCorrespondentTableRowClick(appointmentsTable, nameField, aisIdField, subjectField, messageTextArea, responseTextArea, dateTimeLabel, closedCheckBox, manageResponseTextArea, manageClosedCheckBox);
                User.setLastAction();
            } else {
                logoutButton.doClick();
                JOptionPane.showMessageDialog(null, "Either your session has expired or your account has been deleted");
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Correspondent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_appointmentsTableMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            if (User.isSessionValid(ACCESS_LEVEL)) {
                refresh();
                User.setLastAction();
            } else {
                logoutButton.doClick();
                JOptionPane.showMessageDialog(null, "Either your session has expired or your account has been deleted");
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void manageDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDeleteButtonActionPerformed
        try {
            if (User.isSessionValid(ACCESS_LEVEL)) {
                DashboardController.handleCorrespondentAppointmentDelete(appointmentsTable, manageTabbedPane, nameField, aisIdField, subjectField, messageTextArea, responseTextArea, dateTimeLabel, closedCheckBox, manageResponseTextArea, manageClosedCheckBox);
                refresh();
                User.setLastAction();
            } else {
                logoutButton.doClick();
                JOptionPane.showMessageDialog(null, "Either your session has expired or your account has been deleted");
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_manageDeleteButtonActionPerformed

    private void manageUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageUpdateButtonActionPerformed
        try {
            if (User.isSessionValid(ACCESS_LEVEL)) {
                DashboardController.handleCorrespondentAppointmentUpdate(appointmentsTable, responseTextArea, closedCheckBox, manageResponseTextArea, manageClosedCheckBox);
                refresh();
                User.setLastAction();
            } else {
                logoutButton.doClick();
                JOptionPane.showMessageDialog(null, "Either your session has expired or your account has been deleted");
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_manageUpdateButtonActionPerformed

    private void addDateTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateTimeButtonActionPerformed
        try {
            if (User.isSessionValid(ACCESS_LEVEL)) {
                DashboardController.handleCorrespondentDateTimeAdd(addDateTimePicker);
                DashboardController.handleCorrespondentDateTimeUpdate(deleteDateTimeComboBox, deleteDateTimeList);
                
                addDateTimePicker.datePicker.setText("");
                addDateTimePicker.timePicker.setText("");
                addDateTimePicker.datePicker.requestFocus();
                deleteDateTimeComboBox.setSelectedIndex(0);
                User.setLastAction();
            } else {
                logoutButton.doClick();
                JOptionPane.showMessageDialog(null, "Either your session has expired or your account has been deleted");
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Correspondent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addDateTimeButtonActionPerformed

    private void deleteDateTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDateTimeButtonActionPerformed
        try {
            if (User.isSessionValid(ACCESS_LEVEL)) {
                DashboardController.handleCorrespondentDateTimeDelete(deleteDateTimeComboBox, deleteDateTimeList);
                DashboardController.handleCorrespondentDateTimeUpdate(deleteDateTimeComboBox, deleteDateTimeList);

                DashboardController.handleCorrespondentAppointmentsTableUpdate(appointmentsTable);
                appointmentsTable.clearSelection();

                addDateTimePicker.datePicker.requestFocus();
                deleteDateTimeComboBox.setSelectedIndex(0);
                User.setLastAction();
            } else {
                logoutButton.doClick();
                JOptionPane.showMessageDialog(null, "Either your session has expired or your account has been deleted");
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Correspondent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteDateTimeButtonActionPerformed

    private void manageTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_manageTabbedPaneStateChanged
        int index = manageTabbedPane.getSelectedIndex();
        if (index == 1) {
            manageResponseTextArea.requestFocus();
        }
    }//GEN-LAST:event_manageTabbedPaneStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Container;
    private javax.swing.JButton addDateTimeButton;
    private javax.swing.JLabel addDateTimeLabel;
    private static com.github.lgooddatepicker.components.DateTimePicker addDateTimePicker;
    private static javax.swing.JTextField aisIdField;
    private javax.swing.JLabel aisIdLabel;
    private javax.swing.JPanel appointmentsPanel;
    private static javax.swing.JTable appointmentsTable;
    private static javax.swing.JCheckBox closedCheckBox;
    private javax.swing.JLabel dateLabel;
    private static javax.swing.JLabel dateTimeLabel;
    private javax.swing.JPanel datesAndTimesPanel;
    private javax.swing.JButton deleteDateTimeButton;
    private static javax.swing.JComboBox<String> deleteDateTimeComboBox;
    private javax.swing.JLabel deleteDateTimeLabel;
    private static javax.swing.JList<String> deleteDateTimeList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton logoutButton;
    private static javax.swing.JCheckBox manageClosedCheckBox;
    private javax.swing.JButton manageDeleteButton;
    private javax.swing.JPanel managePanel;
    private javax.swing.JLabel manageResponseLabel;
    private static javax.swing.JTextArea manageResponseTextArea;
    private static javax.swing.JTabbedPane manageTabbedPane;
    private javax.swing.JButton manageUpdateButton;
    private javax.swing.JLabel messageLabel;
    private static javax.swing.JTextArea messageTextArea;
    private static javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel responseLabel;
    private static javax.swing.JTextArea responseTextArea;
    private static javax.swing.JTextField subjectField;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JLabel title;
    private static javax.swing.JLabel userNameLabel;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
